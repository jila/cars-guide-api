<?php

namespace Tests\Feature;

use App\Contracts\CarMakeRepositoryInterface;
use App\Contracts\CarModelRepositoryInterface;
use App\Contracts\CarRepositoryInterface;
use Database\Seeders\VehiclesSeeder;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use App;

class CarApiTest extends TestCase
{
    use DatabaseTransactions;

    protected $carMakeRepo;
    protected $carModelRepo;
    protected $carRepo;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->carMakeRepo = App::make(CarMakeRepositoryInterface::class);
        $this->carModelRepo = App::make(CarModelRepositoryInterface::class);
        $this->carRepo = App::make(CarRepositoryInterface::class);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_a_basic_request()
    {
        $response = $this->get('/api/car');

        $response->assertStatus(200);
    }

    public function test_add_new_car_missing_parameters()
    {
        // The create request must have make_id and model_id
        $response = $this->json('POST', '/api/car',
            [
                'id' => 'test id',
                'year' => '2020'
            ]);

        $response
            ->assertStatus(400)
            ->assertJson([
                'result' => 'error',
            ]);
    }

    public function test_add_new_car()
    {
        $carMakeNameRandom = 'car make ' . bin2hex(random_bytes(5));
        $carModelNameRandom = 'car model ' . bin2hex(random_bytes(5));

        // First create the car_make

        $newCarMake  = $this->carMakeRepo->create(['make' => $carMakeNameRandom]);

        // then create a car_model

        $newCarModel  = $this->carModelRepo->create([
            'car_make_id' => $newCarMake->id,
            'model'   => $carModelNameRandom
        ]);

        // Then create a car
        // The create request must have make_id and model_id
        $this->json('POST', '/api/car',
            [
                'id' => 'test id ' . bin2hex(random_bytes(5)),
                'year' => '2020',
                'make_id' => $newCarMake->id,
                'model_id' => $newCarModel->id,
                'variant' => 'GT Line'
            ])->assertStatus(200)
            ->assertJsonStructure([
                'new_car' => ['id', 'car_make_id', 'car_model_id', 'year', 'variant', 'updated_at', 'created_at', 'key']
            ]);
    }

    public function test_edit_car()
    {
        [$id, $newCar] = $this->create_new_car();

        $this->json('PATCH', "/api/car/{$id}",
            [
                'year' => '2010',
                'variant' => 'GT Line variant'
            ]);


        $editedCar = $this->carRepo->get([
            'id'  => $id,
            'key' => $newCar->key
        ]);

        $this->assertEquals(2010, $editedCar[0]['year']);
    }

    public function test_delete_car()
    {
        [$id, $newCar] = $this->create_new_car();
        $this->json('DELETE', "/api/car/{$id}");

        $result = $this->carRepo->get([
            'id'  => $id,
            'key' => $newCar->key
        ]);

        $this->assertEmpty($result);
    }

    public function test_get_cars_list()
    {
        try {
            $this->seed(VehiclesSeeder::class);
        } catch (\Exception $e) {
            // it is the duplicate ID, if already seed run manually
        }
        $result = $this->json('GET', '/api/car',
            [
                'per_page' => 2,
                'page'     => 2,
                'order_by' => 'key'
            ]);

        $this->assertEquals(2, count($result->original['rows']));
    }

    protected function create_new_car(): array
    {
        // Create a new record then change it, get it and check
        $carMakeNameRandom = 'car make ' . bin2hex(random_bytes(5));
        $carModelNameRandom = 'car model ' . bin2hex(random_bytes(5));

        // First create the car_make

        $newCarMake  = $this->carMakeRepo->create(['make' => $carMakeNameRandom]);

        // then create a car_model
        $newCarModel  = $this->carModelRepo->create([
            'car_make_id' => $newCarMake->id,
            'model'   => $carModelNameRandom
        ]);

        $id = 'test id ' . bin2hex(random_bytes(5));

        $newCar = $this->carRepo->create([
            'id' => $id,
            'year' => '2020',
            'car_make_id' => $newCarMake->id,
            'car_model_id' => $newCarModel->id,
            'variant' => 'GT Line'
        ]);

        return [
            $id,
            $newCar
        ];
    }
}
